#include<Eigen/Dense>
#include<opencv2/calib3d.hpp>
#include <vector>
#include<math.h>
class Robot{
    public:

    // Robot(double w , double p , double r , double x , double y , double z){
    Robot(double x , double y , double z , double w , double p , double r){
        //init translation 
        t(0,0) = x ; t(1,0) = y ; t(2,0) = z;
        w = w*M_PI/180;
        p = p*M_PI/180;
        r = r*M_PI/180;
        Eigen::Matrix3d rx , ry , rz;
        rx << 
        1 ,         0 ,         0,
        0 , std::cos(w) , -std::sin(w),
        0 , std::sin(w) ,  std::cos(w);

        ry <<
        std::cos(p) , 0 , std::sin(p) , 
        0           , 1 ,    0 ,
        -std::sin(p), 0 , std::cos(p);

        rz <<
        std::cos(r) , -std::sin(r) , 0 , 
        std::sin(r) , std::cos(r) , 0 ,
        0 , 0 , 1 ;

        R = rz * ry * rx;

        T = Eigen::Matrix4d::Identity();
        T.block<3,3>(0,0) = R;
        T.block<3,1>(0,3) = t;
    }
    ~Robot(){}
    
    Eigen::Matrix4d T;
    Eigen::Matrix3d R;
    Eigen::Matrix<double , 3, 1> t;

};

namespace HandEye_data{
Eigen::Matrix<double , 3,3> getans(){
    Eigen::Matrix<double , 3,3> output;
    output <<
    -0.998575,  0.0526666, 0.00864991,
    -0.052595,  -0.998581, 0.00830425,
    0.009075, 0.00783748,   0.999928;

    return output;
}
std::vector<Eigen::Matrix4d> getTPH(){
    std::vector<Eigen::Matrix4d> output(4);
    output[0] << 
    -0.99840581, 0.055811204, 0.0084257517, 62.640743,
    -0.055725284, -0.99839497, 0.01010926, 220.98581,
    0.0089764381, 0.009623616, 0.99991339, 147.15016,
    0, 0, 0, 1;

    output[1] <<
    -0.99851924, 0.053708874, 0.0086418698, 62.534996,
    -0.053636126, -0.99852484, 0.0084405504, 221.49638,
    0.0090824543, 0.0079645356, 0.99992704, 147.26512,
    0, 0, 0, 1;

    // output[1] <<
    // -0.998519, 0.053708, 0.008641, 62.53,
    // -0.053636, -0.998524, 0.00844, 221.496,
    // 0.009082, 0.007964, 0.999927, 147.265,
    // 0, 0, 0, 1;

    output[2] <<
    -0.99851906, 0.053712279, 0.0086399242, 62.535805,
    -0.053639509, -0.99852467, 0.0084444713, 221.49509,
    0.009080749, 0.0079685245, 0.99992704, 147.26495,
    0, 0, 0, 1;

    output[3] <<    
    -0.998575,  0.0526666, 0.00864991, 62.54,
    -0.052595,  -0.998581, 0.00830425, 221.482,
    0.009075, 0.00783748,   0.999928 , 147.285,
    0,0,0,1;

    return output;
}

std::vector<Eigen::Matrix4d> getCameradata(){
    std::vector<Eigen::Matrix4d> data(10);
    data[0] <<
    0.99802554, 0.062184192, -0.0088441353, 35.112488,
    -0.06230709, 0.99795359, -0.014374712, -39.957619,
    0.0079321563, 0.014897383, 0.9998576, 473.71411,
    0, 0, 0, 1;
    data[1] <<
    0.99651515, -0.049713761, 0.066977948, 78.747772,
    0.049368367, 0.99875748, 0.0068032043, -42.600746,
    -0.067232944, -0.0034729042, 0.99773121, 477.27188,
    0, 0, 0, 1;

    data[2] <<
    0.98229253, -0.04821242, 0.18104407, 119.83787,
    0.046478361, 0.99882382, 0.013810839, -39.751728,
    -0.18149701, -0.0051516513, 0.98337799, 479.81696,
    0, 0, 0, 1;

    data[3] <<
    0.98490787, -0.052973807, -0.16477324, 76.107864,
    0.052233677, 0.99859583, -0.0088246856, -39.937519,
    0.16500936, 8.4790343e-05, 0.986292, 482.46362,
    0, 0, 0, 1;

    data[4] <<
    0.99666518, 0.076579548, 0.028182182, 110.0449,
    -0.079573877, 0.9886021, 0.12780452, -9.6570015,
    -0.018073751, -0.12962086, 0.99139887, 497.73642,
    0, 0, 0, 1;

    data[5] <<
    0.99905688, 0.035424873, 0.025104929, 123.37473,
    -0.030519111, 0.9842211, -0.17429131, -52.675575,
    -0.030883048, 0.17336076, 0.98437405, 449.55945,
    0, 0, 0, 1;

    data[6] <<
    0.99502879, 0.035846863, -0.09291216, 115.82036,
    -0.054366581, 0.97720677, -0.20521002, -44.519981,
    0.083438255, 0.20924121, 0.97429782, 454.51633,
    0, 0, 0, 1;

    data[7] <<
    0.99706668, 0.013979213, 0.075251862, 116.53122,
    -0.021093814, 0.99529219, 0.094596066, -49.85688,
    -0.073575214, -0.095905915, 0.9926675, 517.31561,
    0, 0, 0, 1;

    data[8] <<
    0.98379529, -0.012595259, -0.17885217, 114.94547,
    0.045411274, 0.98250794, 0.18059823, -54.607182,
    0.17344898, -0.18579358, 0.96715879, 505.86105,
    0, 0, 0, 1;

    data[9] <<
    0.99906838, -0.042255636, 0.008753743, 120.87695,
    0.041478623, 0.99629748, 0.075304903, -19.078972,
    -0.011903387, -0.074871652, 0.99712211, 502.22992,
    0, 0, 0, 1;

    return data;
}



std::vector<Eigen::Matrix4d> getRobotdata(){
    std::vector<Eigen::Matrix4d> data(10);
    data[0] = Robot(542.482,	34.353,	    1537.782,	-89.490,	-0.482,	-88.666).T;
    data[1] = Robot(545.761,	65.842,	    1549.295,	-90.523,	-6.923,	-92.778).T;
    data[2] = Robot(545.778,	95.414,	    1549.286,	-90.524,	-6.924,	-99.258).T;
    data[3] = Robot(545.821,	-77.589,	1546.391,	-90.525,	-6.923,	-79.333).T;
    data[4] = Robot(557.436,	-27.076,	1593.581,	-97.724,	0.447,	-90.137).T;
    data[5] = Robot(531.556,	-27.097,	1449.165,	-80.360,	-2.081,	-90.798).T;
    data[6] = Robot(531.590,	-94.503,	1417.656,	-78.348,	-1.946,	-84.123).T;
    data[7] = Robot(531.614,	16.089,	    1618.290,	-95.871,	-3.222,	-92.876).T;
    data[8] = Robot(596.749,	-124.861,	1679.712,	-101.310,	-4.431,	-77.888).T;
    data[9] = Robot(538.312,	-15.040,	1574.436,	-94.663,	-6.413,	-89.028).T;
    return data;
}


//end of namespace 
}

